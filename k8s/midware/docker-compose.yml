version: "3"
services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:5.5.0"
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: "WARN"
      ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL: "WARN"
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok"
  kafka:
    depends_on:
      - zookeeper
    image: "confluentinc/cp-kafka:5.5.0"
    ports:
      - '9092:9092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://172.17.183.16:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: "1"
      KAFKA_LOG_RETENTION_HOURS: "24"
      KAFKA_MESSAGE_MAX_BYTES: "50000000" #50MB or bust
      KAFKA_MAX_REQUEST_SIZE: "50000000" #50MB on requests apparently too
      CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_LOG4J_LOGGERS: "kafka.cluster=WARN,kafka.controller=WARN,kafka.coordinator=WARN,kafka.log=WARN,kafka.server=WARN,kafka.zookeeper=WARN,state.change.logger=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: "WARN"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "WARN"
  clickhouse:
    depends_on:
      - zookeeper
    image: "yandex/clickhouse-server:20.3.9.70"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - '8123:8123'
      - '9003:9000'
    volumes:
      - type: bind
        read_only: true
        source: ./dist_config.xml
        target: /etc/clickhouse-server/config.d/dist_config.xml
    environment:
      # This limits Clickhouse's memory to 30% of the host memory
      # If you have high volume and your search return incomplete results
      # You might want to change this to a higher value (and ensure your host has enough memory)
      MAX_MEMORY_USAGE_RATIO: 0.3
  postgres:
    image: "postgres:9.6"
    ports:
      - '5432:5432'
    healthcheck:
      # Using default user "postgres" from sentry/sentry.conf.example.py or value of POSTGRES_USER if provided
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
    command:
      [
        "postgres",
        "-c",
        "wal_level=logical",
        "-c",
        "max_replication_slots=1",
        "-c",
        "max_wal_senders=1",
      ]
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    entrypoint: /opt/sentry/postgres-entrypoint.sh
    volumes:
      - type: bind
        read_only: true
        source: ./postgres/
        target: /opt/sentry/
  memcached:
    image: "memcached:1.6.9-alpine"
    ports:
      - '11211:11211'
    healthcheck:
      # From: https://stackoverflow.com/a/31877626/5155484
      test: echo stats | nc 127.0.0.1 11211
  redis:
    image: "redis:6.2.4-alpine"
    ports:
      - '6379:6379'
    healthcheck:
      test: redis-cli ping
    ulimits:
      nofile:
        soft: 10032
        hard: 10032


